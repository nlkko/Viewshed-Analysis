#version 130

uniform sampler2D tex;
uniform sampler2D depth_tex;
uniform sampler2D p3d_Texture0;

// Input from vertex shader
in vec2 texcoord;

// Output to the screen
out vec4 p3d_FragColor;

float linearize_depth(float d,float zNear,float zFar)
{
    float z_n = 2.0 * d - 1.0;
    return 2.0 * zNear * zFar / (zFar + zNear - z_n * (zFar - zNear));
}

void main () {
  /* For each of the eight pixels around the current one, calculate
     the difference in depth between it and the current pixel. Take
     the absolute of each of these differences, then add those up.
     Multiply that with a vector that will, after shadig, be clamped
     to a color.
  */
  vec4 color_base = texelFetch(depth_tex, ivec2(gl_FragCoord.xy) + ivec2(0, 0), 0);
  vec4 color_1 = texelFetch(depth_tex, ivec2(gl_FragCoord.xy) + ivec2(-1, -1), 0);
  vec4 color_2 = texelFetch(depth_tex, ivec2(gl_FragCoord.xy) + ivec2(-1,  0), 0);
  vec4 color_3 = texelFetch(depth_tex, ivec2(gl_FragCoord.xy) + ivec2(-1,  1), 0);
  vec4 color_4 = texelFetch(depth_tex, ivec2(gl_FragCoord.xy) + ivec2( 0, -1), 0);
  vec4 color_5 = texelFetch(depth_tex, ivec2(gl_FragCoord.xy) + ivec2( 0,  1), 0);
  vec4 color_6 = texelFetch(depth_tex, ivec2(gl_FragCoord.xy) + ivec2( 1, -1), 0);
  vec4 color_7 = texelFetch(depth_tex, ivec2(gl_FragCoord.xy) + ivec2( 1,  0), 0);
  vec4 color_8 = texelFetch(depth_tex, ivec2(gl_FragCoord.xy) + ivec2( 1,  1), 0);
  vec4 color = (abs(color_base - color_1) +
           abs(color_base - color_2) +
           abs(color_base - color_3) +
           abs(color_base - color_4) +
           abs(color_base - color_5) +
           abs(color_base - color_6) +
           abs(color_base - color_7) +
           abs(color_base - color_8)) * vec4(10, 100, 10, 0);

  p3d_FragColor = color;
}